// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vehicle.Infrastructure.Data;

#nullable disable

namespace Vehicle.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929204011_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Vehicle.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_customer_email");

                    b.HasIndex("PhoneNumber")
                        .HasDatabaseName("ix_customer_phone");

                    b.ToTable("customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Address = "Hanoi, Vietnam",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenvana@example.com",
                            FullName = "Nguyen Van A",
                            PhoneNumber = "0912345678",
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Vehicle.Domain.Models.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicleId");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerId");

                    b.Property<long?>("DistanceMeter")
                        .HasColumnType("bigint")
                        .HasColumnName("distanceMeter");

                    b.Property<string>("Model")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("model");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int")
                        .HasColumnName("modelYear");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("plateNumber");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("purchaseDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("Trim")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("trim");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnName("vin");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("warrantyEndDate");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("warrantyStartDate");

                    b.HasKey("VehicleId");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_vehicle_customer");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.ToTable("vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            VehicleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Color = "Black",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            DistanceMeter = 15000L,
                            Model = "Honda City",
                            ModelYear = 2022,
                            PlateNumber = "30A-12345",
                            PurchaseDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            Trim = "RS",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VIN = "1HGCM82633A123456",
                            WarrantyEndDate = new DateTime(2027, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyStartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Vehicle.Domain.Models.VehiclePart", b =>
                {
                    b.Property<Guid>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("partId");

                    b.Property<string>("BatchCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("batchCode");

                    b.Property<DateTime?>("InstalledAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("installedAt");

                    b.Property<string>("PartType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("partType");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serialNumber");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Installed")
                        .HasColumnName("status");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicleId");

                    b.Property<DateTime?>("WarrantyEndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("warrantyEndDate");

                    b.Property<DateTime?>("WarrantyStartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("warrantyStartDate");

                    b.HasKey("PartId");

                    b.HasIndex("PartType")
                        .HasDatabaseName("ix_part_parttype");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_part_vehicle");

                    b.ToTable("vehicle_part", (string)null);

                    b.HasData(
                        new
                        {
                            PartId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            BatchCode = "BATCH-2023",
                            InstalledAt = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PartType = "BATTERY",
                            SerialNumber = "BAT-123456789",
                            Status = "Installed",
                            VehicleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            WarrantyEndDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WarrantyStartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Vehicle.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("Vehicle.Domain.Models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Vehicle.Domain.Models.VehiclePart", b =>
                {
                    b.HasOne("Vehicle.Domain.Models.Vehicle", "Vehicle")
                        .WithMany("Parts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vehicle.Domain.Models.Customer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vehicle.Domain.Models.Vehicle", b =>
                {
                    b.Navigation("Parts");
                });
#pragma warning restore 612, 618
        }
    }
}
