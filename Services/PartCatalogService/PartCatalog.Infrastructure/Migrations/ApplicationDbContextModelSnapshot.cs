// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PartCatalog.Infrastructure.Data;

#nullable disable

namespace PartCatalog.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PartCatalog.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("CateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CateCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CateId");

                    b.HasIndex("CateCode")
                        .IsUnique();

                    b.HasIndex("CateName")
                        .HasDatabaseName("ix_category_name");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.Package", b =>
                {
                    b.Property<Guid>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PackageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(1m);

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_package_name");

                    b.HasIndex("PackageCode")
                        .IsUnique();

                    b.ToTable("package", (string)null);
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.Part", b =>
                {
                    b.Property<Guid>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("partId");

                    b.Property<Guid?>("CateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("ACTIVE")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PartId");

                    b.HasIndex("CateId");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_part_name");

                    b.HasIndex("PackageId");

                    b.ToTable("part", (string)null);
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.WarrantyPolicy", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WarrantyDistance")
                        .HasColumnType("bigint");

                    b.Property<int?>("WarrantyDuration")
                        .HasColumnType("int");

                    b.HasKey("PolicyId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PackageId", "Status")
                        .HasDatabaseName("ix_policy_pkg_status");

                    b.ToTable("warranty_policy", (string)null);
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.Package", b =>
                {
                    b.HasOne("PartCatalog.Domain.Models.Category", "Category")
                        .WithMany("Packages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.Part", b =>
                {
                    b.HasOne("PartCatalog.Domain.Models.Category", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PartCatalog.Domain.Models.Package", "Package")
                        .WithMany("Parts")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.WarrantyPolicy", b =>
                {
                    b.HasOne("PartCatalog.Domain.Models.Package", "Package")
                        .WithMany("WarrantyPolicies")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.Category", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("PartCatalog.Domain.Models.Package", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("WarrantyPolicies");
                });
#pragma warning restore 612, 618
        }
    }
}
